@page "/createsale"

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<h3 class="heading-1">Sales</h3>
<POS1.Components.Pages.Inventory.SearchProduct FilteredProducts="@filteredProducts" OnProductAndStockSelected="HandleSaleSelected"
  ShouldPassStock="true" />


  
  @if (saleItems.Any())
{
    <h4 class="heading-2">Selected Products:</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity Available</th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>Quantity Unit</th>
                <th>Total Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var saleItem in saleItems)
            {
                
                <tr>
                    <td>@saleItem.Product.Name</td>
                    <td>@saleItem.stock.QuantityAvailable</td>
                    <td>@saleService.FormatPrice(saleItem.UnitPrice)</td> 
                     <td>
                        <input type="number"  step="0.01" min="0.01" max="@saleItem.stock.QuantityAvailable" @bind:get="@saleItem.Quantity"
                       @bind:event="oninput" @bind:set="(value) =>  UpdateQuantity(saleItem,value)" />
                    </td>
                   <td> @saleItem.Product.QuantityUnit</td>
                    <td>
                        <input type="number" step="0.01" min="0.01" @bind:get="@saleItem.TotalPrice" @bind:event="oninput"
                        @bind:set="(value) => UpdateTotalPrice(saleItem, value)" />
                    </td>
                    <td><button class="btn btn-danger btn-style" @onclick="() => RemoveSaleItem(saleItem)">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>

   
    <div class="discount">
        <div class="heading-3">  <strong> Discount:</strong> 
            <input type="number" class="discountinput" min="0.01" step="0.01" id="discount" value="@Discount" @oninput="e => UpdateDiscount(e)" />
        </div>
    </div>
    <div class="heading-3">Total: @saleService.FormatPrice(CalculateTotalAmount(Discount))</div>
    <button class="btn btn-primary btn-style" @onclick="CreateSale">Create Sale</button>
}
<p>@errorMessage</p>

@code {

    private List<Product> filteredProducts;
    private List<SaleItem> saleItems = new List<SaleItem>();
    private string errorMessage = "";
    private double Discount { get; set; }

    private void HandleSaleSelected((Product product, Stock stock) selectedProduct)
    {
        var product = selectedProduct.product;
        var stock = selectedProduct.stock;


        var existingSaleItem = saleItems.FirstOrDefault(si => si.Product.Id == product.Id && si.StockId==stock.ID);
        if (existingSaleItem == null)
        {
            var newSaleItem = new SaleItem
                {
                    ProductID = product.Id,
                    Product = product,
                    StockId=stock.ID,
                    stock=stock,
                    Quantity = 0,
                    QuantityUnit = product.QuantityUnit.ToString(),
                    UnitPrice = stock.SalePrice,
                    TotalPrice = 0,
                    TenantID = product.TenantId,
                };
            saleItems.Add(newSaleItem);
        }
        else
        {
            if (stock.QuantityAvailable > existingSaleItem.Quantity)
            {
                existingSaleItem.Quantity++;
                existingSaleItem.TotalPrice = existingSaleItem.Quantity * existingSaleItem.UnitPrice;
            }
            CalculateTotalAmount(Discount);
        }

        StateHasChanged(); 
    }

    private async Task CreateSale()
    {
        if (saleItems.Any())
        {
            var userName = await CookieUtility.GetUserFromCookieAsync(httpContextAccessor);
            var user = await userService.GetUserByUsernameAsync(userName);

            var a = await saleService.GenerateSale(saleItems, user, Discount);


            if (a!=null)
            {
                NavigationManager.NavigateTo($"/sale/{a.SaleID}");
            }
        }
    }

    private void RemoveSaleItem(SaleItem saleItem)
    {
        saleItems.Remove(saleItem);
    }

    public void UpdateQuantity(SaleItem saleItem,double value)
    {
            saleItem.Quantity = Math.Clamp(value, 0, saleItem.stock.QuantityAvailable);
            saleItem.TotalPrice = Math.Round(saleItem.Quantity * saleItem.UnitPrice, 2);
        StateHasChanged();
    }

    private void UpdateTotalPrice(SaleItem saleItem,double value)
    {
        double maxPrice = Math.Round(saleItem.stock.QuantityAvailable * saleItem.stock.SalePrice,2);
            saleItem.TotalPrice = Math.Clamp(value, 0, maxPrice);
        saleItem.Quantity = Math.Round(saleItem.TotalPrice / saleItem.UnitPrice, 2);
        
        StateHasChanged();
    }
 
    private double CalculateTotalAmount(double Discount)
    {
        double a= saleItems.Sum(si => si.TotalPrice);
        return a - Discount;
    }

    private void UpdateDiscount(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(input))
        {
            Discount = 0;
        }

        if (double.TryParse(e.Value.ToString(), out double discount))
        {
            Discount = Math.Max(discount, 0);  
            StateHasChanged();
        }
    
    }
}
<style>
    .discount {
        display: flex;
    }
</style>