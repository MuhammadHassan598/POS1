@page "/suppliersbill/update/{id}"
@inject NavigationManager navigationManager
@rendermode InteractiveServer
  @inject IJSRuntime JSRuntime
<div class="top-row-section">
  
    <h3 class="heading-1">SupplierBillUpdate</h3>
  <button class="btn btn-outline-primary btn-style" 
        @onclick="navigateToBill">
    Back To SupplierBill
</button>

</div>
<AlertComponent SuccessMessage="@successMessage" ErrorMessage="@errorMessage" />

@if (supplierBill != null)

{
    <div class="supplier-bill">
        <div class="flex-style">
            <div> <strong>Bill Id: </strong> @supplierBill.Id</div>
            <div> <strong> Bill Date:</strong>@saleService.FormatSaleDateTime(@supplierBill.OrderDate)</div>
        </div>
        <div class="flex-style">
            <div> <strong>Tenant Id: </strong> @supplierBill.TenantID</div>
            <div> <strong> Total Amount: </strong> @saleService.FormatPrice(@supplierBill.TotalAmount)</div>
        </div>

        <table class="table  table-hover">
            <thead>
                <tr>
                    <td>Bill_Item Id</td>
                    <td> Product Name</td>
                    <td>Quantity</td>
                    <td>Quntity Unit</td>
                    <td>Price</td>
                    <td>Total Price</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in supplierBill.SupplierItems)
                {
                    <tr @onclick="() => SelectSupplierItem(item)">
                        <td>@item.Id</td>
                        <td>@item.Product.Name</td>
                        <td>@item.QuantityReceived</td>
                        <td>@item.Product.QuantityUnit</td>
                        <td>@saleService.FormatPrice(@item.UnitPrice)</td>
                        <td>@saleService.FormatPrice(@item.TotalPrice)</td>
                    </tr>

                }

            </tbody>

        </table>






    </div>


}


<POS1.Components.Pages.Inventory.SearchProduct FilteredProducts="@filteredProducts" OnProductSelected="HandleSaleSelected" ShouldPassStock="false" />

<div>
    @if (supplierItems != null && supplierItems.Any())
    {
        <div class="selected mt-5">
            <table class="table">
                <thead>
                    <tr>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Quantity Unit</th>
                        <th>Price (Rs)</th>
                        <th>Sale Price (Rs)</th>
                        <th>Total Price (Rs)</th>
                        <th>Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var supplierItem in supplierItems)
                    {
                        <tr>
                            <td>@supplierItem.ProductId</td>
                            <td>@supplierItem.Product.Name</td>
                            <td>
                                <input type="number" min="0.01" step="0.01" value="@supplierItem.QuantityReceived" class="form-control" @oninput="e => UpdateTotalPriceByQuantity(supplierItem, e)" />
                            </td>
                            <td>
                            
                                @supplierItem.Product.QuantityUnit


                            </td>



                            <td>
                                <input type="number" min="0.01" value="@supplierItem.UnitPrice" class="form-control" step="0.01" required
                                       @oninput="e => UpdateTotalPriceByUnitPrice(supplierItem, e)" />
                            </td>

                            <td>
                                <input type="number" min="@supplierItem.UnitPrice" value="@supplierItem.Product.Stocks.FirstOrDefault().SalePrice" class="form-control" step="0.01" required />
                            </td>
                            <td>
                                @supplierItem.TotalPrice.ToString("F2")
                            </td>
                            <td>
                                <button class="btn btn-danger btn-style" @onclick="() => RemoveSupplierItem(supplierItem)">
                                    Remove


                                </button>


                            </td>
                        </tr>
                    }
                </tbody>
            </table>


            <div class="heading-3">
                <strong>Total Amount: Rs @totalAmount.ToString("F2")</strong>
            </div>

            <button class="btn btn-primary btn-style" @onclick="UpdateStockAsync ">Update Stock</button>
        </div>
    }
</div>
@code {
    private List<Product> filteredProducts;
    private List<Product> updatedProducts = new List<Product>();
    [Parameter]
    public string id { get; set; }
    private SuppliersBill supplierBill;
    public List<SupplierItem> supplierItems = new List<SupplierItem>();
    private double totalAmount = 0;
    private string successMessage;
    private string errorMessage;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(id) && int.TryParse(id, out int Id))
            {
                var userName = await CookieUtility.GetUserFromCookieAsync(httpContextAccessor);
                var user = await userService.GetUserByUsernameAsync(userName);


                supplierBill = await supplierBillsService.GeSupplierBillByIdAsync(Id,user.TenantID);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading supplier bill: {ex.Message}";
        }
    }

    private async Task HandleSaleSelected(Product selectedProduct)
    {
        try
        {
            var existingSupplierBillItem = supplierBill.SupplierItems.FirstOrDefault(p => p.ProductId == selectedProduct.Id);
            var existingSupplierItem = supplierItems.FirstOrDefault(p => p.ProductId == selectedProduct.Id);

            if (existingSupplierItem == null)
            {
                if (existingSupplierBillItem != null)
                {
                    var isStock = await stockService.GetSingleStocksByIdAsync(existingSupplierBillItem.ProductId, existingSupplierBillItem.TenantID, existingSupplierBillItem.UnitPrice, existingSupplierBillItem.QuantityReceived);
                    if (isStock == null) throw new Exception("Stock not found");

                    existingSupplierBillItem.Product.Stocks = new List<Stock> { isStock };
                    supplierItems.Add(existingSupplierBillItem);
                }
                else
                {
                    var newSupplierItem = new SupplierItem
                        {
                            ProductId = selectedProduct.Id,
                            Product = selectedProduct,
                            QuantityReceived = 0,
                            UnitPrice = 0,
                            TotalPrice = 0,
                            TenantID = selectedProduct.TenantId,
                        };
                    var newStock = new Stock
                        {
                            ProductId = selectedProduct.Id,
                            TotalQuantity = 0,
                            CostPrice = 0,
                            SalePrice = 0,
                            QuantityAvailable = 0,
                            TenantId = selectedProduct.TenantId
                        };
                    newSupplierItem.Product.Stocks = new List<Stock> { newStock };
                    supplierItems.Add(newSupplierItem);
                }
            }
            else
            {
                existingSupplierItem.QuantityReceived++;
                existingSupplierItem.TotalPrice = existingSupplierItem.QuantityReceived * existingSupplierItem.UnitPrice;
            }

            totalAmount = supplierItems.Sum(s => s.TotalPrice);


        }
        catch (Exception ex)
        {
            errorMessage = $"Error selecting product: {ex.Message}";
        }

        StateHasChanged();
    }
    private async Task SelectSupplierItem(SupplierItem item)
    {
        try
        {
            var existingItem = supplierItems.FirstOrDefault(i => i.ProductId == item.ProductId);
            if (existingItem == null)
            {
                var isStock = await stockService.GetSingleStocksByIdAsync(item.ProductId, item.TenantID, item.UnitPrice, item.QuantityReceived);
                if (isStock == null) throw new Exception("Stock not found");

                item.Product.Stocks = new List<Stock> { isStock };
                supplierItems.Add(item);
            }
            else
            {
                existingItem.QuantityReceived += item.QuantityReceived;
                existingItem.TotalPrice = existingItem.QuantityReceived * existingItem.UnitPrice;
            }
            totalAmount = supplierItems.Sum(s => s.TotalPrice);

        }
        catch (Exception ex)
        {
            errorMessage = $"Error selecting supplier item: {ex.Message}";
        }

        StateHasChanged();
    }


    private void UpdateTotalPriceByUnitPrice(SupplierItem supplierItem, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var newValue))
        {
            supplierItem.UnitPrice = Math.Round(newValue, 2); // Round to 2 decimal places
            supplierItem.TotalPrice = Math.Round(supplierItem.QuantityReceived * supplierItem.UnitPrice, 2); // Round to 2 decimal places
            totalAmount = Math.Round(supplierItems.Sum(item => item.TotalPrice), 2);
        }
    }

    private void UpdateTotalPriceByQuantity(SupplierItem supplierItem, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var newValue))
        {

            supplierItem.QuantityReceived = Math.Round(newValue, 2);
            supplierItem.TotalPrice = Math.Round(supplierItem.QuantityReceived * supplierItem.UnitPrice, 2); // Round to 2 decimal places
            totalAmount = Math.Round(supplierItems.Sum(item => item.TotalPrice), 2);
        }
    }



    private void RemoveSupplierItem(SupplierItem item)
    {
        supplierItems.Remove(item);
        StateHasChanged();
    }
    private async Task UpdateStockAsync()
    {
        try
        {
            if (supplierItems == null || !supplierItems.Any()) throw new ArgumentException("No items provided for the supplier bill.");
            if (totalAmount <= 0) throw new ArgumentException("Total amount must be greater than zero.");

            totalAmount = Math.Round(totalAmount, 2);
            var userName = await CookieUtility.GetUserFromCookieAsync(httpContextAccessor);
            var user = await userService.GetUserByUsernameAsync(userName);

            var result = await supplierBillsService.UpdateSupplierBill(supplierBill, supplierItems, totalAmount, user);
            if (result != null)
            {
                successMessage = "Stock updated successfully.";
                navigationManager.NavigateTo($"/suppliersbill/{supplierBill.Id}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating stock: {ex.Message}";
        }
    }

    public void AddSupplier()
    {
        navigationManager.NavigateTo("/addsupplier");
    }


    public void navigateToBill()
    {
        navigationManager.NavigateTo($"/suppliersbill/{supplierBill.Id}");
    }

}

